basePath: /api
definitions:
  domain.Category:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  domain.CategoryStock:
    properties:
      category:
        type: string
      product_count:
        type: integer
      total_stock:
        type: integer
      total_value:
        type: number
    type: object
  domain.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  domain.CreateProductRequest:
    properties:
      brand:
        type: string
      category:
        type: string
      description:
        type: string
      image_url:
        description: Legacy field for backward compatibility
        type: string
      image_urls:
        description: Multiple image URLs
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - name
    - price
    - stock
    type: object
  domain.CreateSaleRequest:
    properties:
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
    required:
    - price
    - product_id
    - quantity
    type: object
  domain.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
    required:
    - email
    - name
    - password
    type: object
  domain.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  domain.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/domain.User'
    type: object
  domain.LowStockProduct:
    properties:
      category:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  domain.Product:
    properties:
      brand:
        type: string
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        description: Legacy field for backward compatibility
        type: string
      images:
        description: New field for multiple images
        items:
          $ref: '#/definitions/domain.ProductImage'
        type: array
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  domain.ProductImage:
    properties:
      created_at:
        type: string
      file_path:
        description: Server file path (for uploaded files)
        type: string
      file_size:
        description: File size in bytes
        type: integer
      filename:
        description: Original filename (for uploaded files)
        type: string
      id:
        description: Unique ID for this image
        type: string
      is_primary:
        description: true for the main product image
        type: boolean
      is_url:
        description: true if URL-based, false if uploaded file
        type: boolean
      mime_type:
        description: MIME type (image/jpeg, image/png, etc.)
        type: string
      url:
        description: Image URL (for URL-based images)
        type: string
    type: object
  domain.ProductSales:
    properties:
      product_id:
        type: string
      product_name:
        type: string
      total_revenue:
        type: number
      total_sold:
        type: integer
    type: object
  domain.Sale:
    properties:
      created_at:
        type: string
      date_sold:
        type: string
      id:
        type: string
      price:
        type: number
      product:
        $ref: '#/definitions/domain.Product'
      product_id:
        type: string
      quantity:
        type: integer
      total:
        type: number
      updated_at:
        type: string
    type: object
  domain.SalesSummary:
    properties:
      period:
        type: string
      total_items:
        type: integer
      total_revenue:
        type: number
      total_sales:
        type: number
    type: object
  domain.StockSummary:
    properties:
      categories:
        items:
          $ref: '#/definitions/domain.CategoryStock'
        type: array
      low_stock_products:
        type: integer
      total_products:
        type: integer
      total_stock_value:
        type: number
    type: object
  domain.StockUpdateRequest:
    properties:
      stock:
        minimum: 0
        type: integer
    required:
    - stock
    type: object
  domain.UpdateProductRequest:
    properties:
      brand:
        type: string
      category:
        type: string
      description:
        type: string
      image_url:
        description: Legacy field for backward compatibility
        type: string
      image_urls:
        description: Multiple image URLs
        items:
          type: string
        type: array
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8082
info:
  contact:
    email: support@agricultural-equipment-store.com
    name: API Support
  description: API for Agricultural Equipment Store with Clean Architecture
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Agricultural Equipment Store API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/profile:
    get:
      description: Get current user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /categories:
    get:
      consumes:
      - application/json
      description: Retrieve all product categories
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/domain.Category'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new product category (admin only)
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/domain.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Category created successfully
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Category already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by ID (admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Retrieve a single category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category found
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a category by ID
      tags:
      - categories
  /inventories/{id}/stock:
    put:
      consumes:
      - application/json
      description: Update stock quantity for a specific product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Stock update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.StockUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update product stock
      tags:
      - inventory
  /inventories/low-stock:
    get:
      description: Get products with stock below threshold
      parameters:
      - description: 'Stock threshold (default: 10)'
        in: query
        name: threshold
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.LowStockProduct'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get low stock products
      tags:
      - inventory
  /inventories/summary:
    get:
      description: Get overall stock summary including totals and category breakdown
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.StockSummary'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get stock summary
      tags:
      - inventory
  /products:
    get:
      description: Get products with optional filtering and pagination
      parameters:
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Brand filter
        in: query
        name: brand
        type: string
      - description: Minimum price filter
        in: query
        name: min_price
        type: number
      - description: Maximum price filter
        in: query
        name: max_price
        type: number
      - description: Search in name and description
        in: query
        name: search
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get products
      tags:
      - products
    post:
      consumes:
      - application/json
      - multipart/form-data
      description: Create a new product (admin only). Supports both JSON with image
        URLs and multipart form with file uploads.
      parameters:
      - description: Product creation request (JSON)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.CreateProductRequest'
      - description: Product name (Form)
        in: formData
        name: name
        required: true
        type: string
      - description: Product description (Form)
        in: formData
        name: description
        type: string
      - description: Product price (Form)
        in: formData
        name: price
        required: true
        type: number
      - description: Product category (Form)
        in: formData
        name: category
        required: true
        type: string
      - description: Product brand (Form)
        in: formData
        name: brand
        type: string
      - description: Product stock (Form)
        in: formData
        name: stock
        required: true
        type: integer
      - description: Comma-separated image URLs (Form)
        in: formData
        name: image_urls
        type: string
      - description: Product images (Form, multiple files allowed)
        in: formData
        name: images
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - products
    get:
      description: Get a single product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      - multipart/form-data
      description: Update a product (admin only). Supports both JSON with image URLs
        and multipart form with file uploads.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product update request (JSON)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateProductRequest'
      - description: Product name (Form)
        in: formData
        name: name
        type: string
      - description: Product description (Form)
        in: formData
        name: description
        type: string
      - description: Product price (Form)
        in: formData
        name: price
        type: number
      - description: Product category (Form)
        in: formData
        name: category
        type: string
      - description: Product brand (Form)
        in: formData
        name: brand
        type: string
      - description: Product stock (Form)
        in: formData
        name: stock
        type: integer
      - description: Product active status (Form)
        in: formData
        name: is_active
        type: boolean
      - description: Comma-separated image URLs (Form)
        in: formData
        name: image_urls
        type: string
      - description: Product images (Form, multiple files allowed)
        in: formData
        name: images
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - products
  /sales:
    get:
      description: Get sales list with optional filtering
      parameters:
      - description: From date (YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: To date (YYYY-MM-DD)
        in: query
        name: to
        type: string
      - description: Product ID
        in: query
        name: product_id
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Sale'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get sales
      tags:
      - sales
    post:
      consumes:
      - application/json
      description: Create a new sale record
      parameters:
      - description: Sale creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.CreateSaleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Sale'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new sale
      tags:
      - sales
  /sales/by-product:
    get:
      description: Get sales data grouped by product
      parameters:
      - description: From date (YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: To date (YYYY-MM-DD)
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ProductSales'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get sales by product
      tags:
      - sales
  /sales/export:
    get:
      description: Export sales data as CSV
      parameters:
      - description: From date (YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: To date (YYYY-MM-DD)
        in: query
        name: to
        type: string
      - default: csv
        description: Export format (csv)
        in: query
        name: format
        type: string
      produces:
      - text/csv
      responses:
        "200":
          description: CSV data
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Export sales data
      tags:
      - sales
  /sales/summary:
    get:
      description: Get sales summary for current month or specified period
      parameters:
      - description: From date (YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: To date (YYYY-MM-DD)
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.SalesSummary'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get sales summary
      tags:
      - sales
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
